#include <iostream>
#include <cmath>
#include "globalv.h"
using namespace std;
/*dphidEantinue under 2Mev*/
struct datapoint
{
    double_t x[400];
    double_t y[400]=
    {
3.11513E+11,
5.66955E+11,
9.58449E+11,
1.25468E+12,
9.78496E+11,
7.29309E+11,
1.22859E+12,
1.66375E+12,
1.94431E+12,
2.29459E+12,
2.70455E+12,
2.93177E+12,
2.98106E+12,
2.97055E+12,
3.03271E+12,
3.16221E+12,
3.41615E+12,
3.70862E+12,
4.03709E+12,
4.33754E+12,
4.51073E+12,
4.60718E+12,
4.76771E+12,
4.98723E+12,
5.1652E+12,
5.37725E+12,
5.49138E+12,
5.58772E+12,
5.64926E+12,
5.66739E+12,
5.61491E+12,
5.54977E+12,
5.51667E+12,
5.48651E+12,
5.4879E+12,
5.49225E+12,
5.52498E+12,
5.48285E+12,
5.41549E+12,
5.38042E+12,
5.24356E+12,
5.04743E+12,
4.88912E+12,
4.73681E+12,
4.58883E+12,
4.44528E+12,
4.30777E+12,
4.15226E+12,
3.97345E+12,
3.81614E+12,
3.71205E+12,
3.63406E+12,
3.60272E+12,
3.57556E+12,
3.59953E+12,
3.65372E+12,
3.68285E+12,
3.70731E+12,
3.71735E+12,
3.71488E+12,
3.71601E+12,
3.71408E+12,
3.72047E+12,
3.69343E+12,
3.66621E+12,
3.65233E+12,
3.60826E+12,
3.58818E+12,
3.57059E+12,
3.5758E+12,
3.56618E+12,
3.55291E+12,
3.5762E+12,
3.57212E+12,
3.57517E+12,
3.56778E+12,
3.52385E+12,
3.52884E+12,
3.52415E+12,
3.48063E+12,
3.48079E+12,
3.43639E+12,
3.4367E+12,
3.41488E+12,
3.41481E+12,
3.39379E+12,
3.39139E+12,
3.39349E+12,
3.37451E+12,
3.35132E+12,
3.3457E+12,
3.36607E+12,
3.37123E+12,
3.37037E+12,
3.36836E+12,
3.3841E+12,
3.39898E+12,
3.36232E+12,
3.35404E+12,
3.39645E+12,
3.43037E+12,
3.43652E+12,
3.44107E+12,
3.41458E+12,
3.39188E+12,
3.37451E+12,
3.34627E+12,
3.33705E+12,
3.28862E+12,
3.24904E+12,
3.20685E+12,
3.16919E+12,
3.1196E+12,
3.03907E+12,
2.95893E+12,
2.86982E+12,
2.82079E+12,
2.76156E+12,
2.67741E+12,
2.62599E+12,
2.54471E+12,
2.51377E+12,
2.46626E+12,
2.451E+12,
2.39087E+12,
2.31408E+12,
2.29778E+12,
2.26871E+12,
2.26761E+12,
2.24224E+12,
2.22436E+12,
2.21338E+12,
2.18427E+12,
2.181E+12,
2.1605E+12,
2.13981E+12,
2.13277E+12,
2.08931E+12,
2.04756E+12,
2.04363E+12,
2.03046E+12,
1.99851E+12,
1.99084E+12,
1.9788E+12,
1.95683E+12,
1.9462E+12,
1.93482E+12,
1.91654E+12,
1.89631E+12,
1.88255E+12,
1.8548E+12,
1.84035E+12,
1.83615E+12,
1.81177E+12,
1.8055E+12,
1.80308E+12,
1.79353E+12,
1.79078E+12,
1.76904E+12,
1.7701E+12,
1.75754E+12,
1.74738E+12,
1.74735E+12,
1.73603E+12,
1.72508E+12,
1.71389E+12,
1.71431E+12,
1.69353E+12,
1.68074E+12,
1.68201E+12,
1.66145E+12,
1.65884E+12,
1.651E+12,
1.63977E+12,
1.62961E+12,
1.61935E+12,
1.60867E+12,
1.60025E+12,
1.58066E+12,
1.57428E+12,
1.56981E+12,
1.55847E+12,
1.54904E+12,
1.53901E+12,
1.52977E+12,
1.5184E+12,
1.51581E+12,
1.50608E+12,
1.49461E+12,
1.48846E+12,
1.47382E+12,
1.47485E+12,
1.45927E+12,
1.44684E+12,
1.44302E+12,
1.42766E+12,
1.42544E+12,
1.40914E+12,
1.408E+12,
1.39063E+12,
1.39172E+12,
1.38125E+12,
1.36392E+12,
1.35604E+12,
1.35603E+12,
1.34736E+12,
1.33882E+12,
1.33037E+12,
1.32196E+12,
1.31355E+12,
1.30548E+12,
1.2962E+12,
1.29695E+12,
1.28147E+12,
1.2796E+12,
1.26678E+12,
1.25618E+12,
1.24762E+12,
1.24753E+12,
1.23483E+12,
1.23062E+12,
1.22001E+12,
1.21442E+12,
1.2055E+12,
1.19744E+12,
1.19587E+12,
1.18565E+12,
1.18404E+12,
1.17623E+12,
1.16749E+12,
1.16222E+12,
1.15217E+12,
1.14809E+12,
1.13714E+12,
1.13412E+12,
1.12222E+12,
1.12071E+12,
1.10607E+12,
1.10018E+12,
1.09295E+12,
1.0861E+12,
1.07921E+12,
1.07241E+12,
1.06558E+12,
1.05896E+12,
1.05203E+12,
1.03875E+12,
1.03891E+12,
1.02569E+12,
1.02571E+12,
1.01289E+12,
1.01261E+12,
1.00032E+12,
9.99603E+11,
9.87974E+11,
9.86702E+11,
9.75848E+11,
9.73864E+11,
9.64121E+11,
9.6037E+11,
9.57285E+11,
9.50432E+11,
9.44646E+11,
9.38614E+11,
9.32674E+11,
9.26849E+11,
9.20704E+11,
9.15908E+11,
9.05836E+11,
9.00328E+11,
8.95645E+11,
8.88195E+11,
8.85383E+11,
8.7437E+11,
8.69933E+11,
8.63988E+11,
8.5917E+11,
8.51701E+11,
8.43259E+11,
8.41936E+11,
8.32144E+11,
8.31779E+11,
8.20861E+11,
8.16065E+11,
8.11238E+11,
8.11093E+11,
8.00454E+11,
7.90486E+11,
7.90602E+11,
7.80581E+11,
7.80295E+11,
7.75839E+11,
7.70659E+11,
7.66307E+11,
7.56652E+11,
7.51703E+11,
7.42182E+11,
7.40924E+11,
7.34502E+11,
7.23218E+11,
7.22307E+11,
7.15155E+11,
7.12508E+11,
7.07177E+11,
6.9978E+11,
6.96816E+11,
6.88673E+11,
6.84718E+11,
6.8349E+11,
6.78489E+11,
6.74254E+11,
6.70432E+11,
6.64187E+11,
6.56852E+11,
6.53307E+11,
6.48921E+11,
6.45201E+11,
6.39854E+11,
6.3221E+11,
6.28959E+11,
6.24004E+11,
6.16345E+11,
6.13062E+11,
6.08392E+11,
6.01367E+11,
6.01178E+11,
5.9361E+11,
5.937E+11,
5.86075E+11,
5.82367E+11,
5.78842E+11,
5.71326E+11,
5.71243E+11,
5.64748E+11,
5.57188E+11,
5.53249E+11,
5.50211E+11,
5.43521E+11,
5.39152E+11,
5.36545E+11,
5.29598E+11,
5.28444E+11,
5.23899E+11,
5.18738E+11,
5.16504E+11,
5.10186E+11,
5.07982E+11,
5.05223E+11,
4.97221E+11,
4.9496E+11,
4.92734E+11,
4.84967E+11,
4.82172E+11,
4.8056E+11,
4.72991E+11,
4.69888E+11,
4.68084E+11,
4.63422E+11,
4.62873E+11,
4.55794E+11,
4.51756E+11,
4.51095E+11,
4.4519E+11,
4.4286E+11,
4.39647E+11,
4.33987E+11,
4.28431E+11,
4.23336E+11,
4.23371E+11,
4.17885E+11,
4.12594E+11,
4.12629E+11,
4.07671E+11,
4.02164E+11,
4.02111E+11,
3.97702E+11,
3.92047E+11,
3.91817E+11,
3.87976E+11,
3.82208E+11,
3.81838E+11,
3.78149E+11,
3.74715E+11,
3.72825E+11,
3.6895E+11,
3.63496E+11,
3.62337E+11,
3.60027E+11,
3.54738E+11,
3.51546E+11,
3.49791E+11,
3.46254E+11,
3.42597E+11,
3.40972E+11,
3.37709E+11,
3.33945E+11,
3.32406E+11,
3.29165E+11,
3.26073E+11,
3.24191E+11
    };
};
double_t dsigmaSMdEr(double_t Enu, double_t Er, double_t Q);
double_t Fq(double_t Q);
double_t imitate()
{
    struct datapoint a;
    for(int i = 0; i < 400 ; i++)
    {
        a.x[i] = 0.01*(i+1);
    }
    //create graph
    TGraph *gr1 = new TGraph(400,a.x,a.y);
    TCanvas *c1 = new TCanvas("c1","Antineutrino flux expected at the CONNIE detector",
    800,600,800,600);
    gr1->GetXaxis()->SetTitle("Eantinue(MeV)");
    gr1->GetYaxis()->SetTitle("dsigamdEantinue(N/MeV/cm2/s)");
    gr1->GetXaxis()->CenterTitle();
    gr1->GetYaxis()->CenterTitle();
    // draw the graph with the axis,contineous line, and put
    c1->cd(4);
    gr1->Draw("AL");
    return 0;
}
double_t dsigmaSMdEr(double_t Enu, double_t Er, double_t Q)
{
    double_t Qw = Nn - (1 - 4*sin2TW)*Np;
    double_t M = (Nn + Np)*Mamu;
    double_t result = (pow(GF,2)/(4*3.14159))*pow(Qw,2)*(1-(M*Er/(2*pow(Enu,2)))-(Er/Enu)+pow(Er,2)/(2*pow(Enu,2)))*M*Fq(Q);
    return result;
}
double_t Fq(double_t Q)
{
    double_t rou0 = 3/(pow(r0,3));
    double_t R = r0*pow(Np+Nn,1/3);
    double_t result = (rou0/(28*pow(Q,3)))*(sin(Q*R/hbar)-(Q*R/hbar)*cos(Q*R/hbar))*(1/(1+pow(a*Q/hbar,2)));
    return result; 
}